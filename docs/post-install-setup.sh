#!/usr/bin/env bash
# Post-install NixOS setup for easy flake deployment
# Run this AFTER nixos-install completes on a fresh system
# Designed to work with the standard nixos-install hardware-configuration.nix output

set -euo pipefail

HOSTNAME="${1:-}"
GITHUB_USER="${2:-emet}"  # Update this to your GitHub username
FLAKE_REPO="${3:-nixconf}"

if [[ -z "$HOSTNAME" ]]; then
    echo "Usage: $0 <hostname> [github_user] [repo_name]"
    echo "Example: $0 hearth"
    echo "Example: $0 hearth emet nixconf"
    exit 1
fi

echo "üöÄ Post-install flake setup for host: $HOSTNAME"
echo "üì¶ Repository: https://github.com/$GITHUB_USER/$FLAKE_REPO"

# Check if we're in a chroot environment (nixos-install context)
IN_CHROOT=false
INSTALL_ROOT="/"
if [[ -d "/mnt/etc/nixos" && -f "/mnt/etc/nixos/configuration.nix" ]]; then
    IN_CHROOT=true
    INSTALL_ROOT="/mnt"
    echo "‚úÖ Detected chroot environment (post nixos-install)"
elif [[ -f "/etc/NIXOS" ]]; then
    echo "‚ö†Ô∏è  Running from installer ISO - you should run nixos-install first!"
    exit 1
else
    echo "‚ÑπÔ∏è  Running on installed system"
fi

# Function to run commands with proper environment
run_cmd() {
    if [[ "$IN_CHROOT" == "true" ]]; then
        "$@"
    else
        sudo "$@"
    fi
}

# Verify hostname exists in flake configuration 
FLAKE_DIR="$INSTALL_ROOT/tmp/nixconf"
echo "üì• Cloning flake repository..."
if [[ "$IN_CHROOT" == "true" ]]; then
    # In chroot after nixos-install, git should be available in the environment
    cd "$INSTALL_ROOT/tmp" || mkdir -p "$INSTALL_ROOT/tmp" && cd "$INSTALL_ROOT/tmp"
    
    # Clone the repo if it doesn't exist
    if [[ ! -d "nixconf" ]]; then
        nix-shell -p git --run "git clone https://github.com/$GITHUB_USER/$FLAKE_REPO.git"
    fi
else
    # On live system
    mkdir -p /tmp && cd /tmp
    if [[ ! -d "nixconf" ]]; then
        run_cmd nix-shell -p git --run "git clone https://github.com/$GITHUB_USER/$FLAKE_REPO.git"
    fi
    FLAKE_DIR="/tmp/nixconf"
fi

# Verify hostname exists in flake
if [[ ! -d "$FLAKE_DIR/hosts/$HOSTNAME" ]]; then
    echo "‚ùå Host '$HOSTNAME' not found in flake configuration"
    echo "Available hosts:"
    ls "$FLAKE_DIR/hosts/" 2>/dev/null || echo "No hosts directory found"
    echo ""
    echo "You'll need to:"
    echo "1. Add the host configuration to your flake"  
    echo "2. Commit and push changes"
    echo "3. Run this script again"
    exit 1
fi

# Backup existing configuration generated by nixos-install
echo "üìã Processing nixos-install generated configuration..."
NIXOS_CONFIG_DIR="$INSTALL_ROOT/etc/nixos"

# Backup the generated configs
if [[ -f "$NIXOS_CONFIG_DIR/configuration.nix" ]]; then
    echo "üíæ Backing up nixos-install generated configuration.nix"
    cp "$NIXOS_CONFIG_DIR/configuration.nix" "$NIXOS_CONFIG_DIR/configuration.nix.backup"
fi

if [[ -f "$NIXOS_CONFIG_DIR/hardware-configuration.nix" ]]; then
    echo "üíæ Backing up nixos-install generated hardware-configuration.nix"
    cp "$NIXOS_CONFIG_DIR/hardware-configuration.nix" "$NIXOS_CONFIG_DIR/hardware-configuration.nix.backup"
fi

# Copy flake to system location
echo "üìÇ Deploying flake configuration..."
if [[ "$IN_CHROOT" == "true" ]]; then
    cp -r "$FLAKE_DIR"/* "$NIXOS_CONFIG_DIR/"
    chmod -R 644 "$NIXOS_CONFIG_DIR"/*
    find "$NIXOS_CONFIG_DIR" -type d -exec chmod 755 {} \;
    # Ensure scripts remain executable
    find "$NIXOS_CONFIG_DIR" -name "*.sh" -exec chmod +x {} \;
else
    run_cmd cp -r "$FLAKE_DIR"/* "$NIXOS_CONFIG_DIR/"
    run_cmd chmod -R 644 "$NIXOS_CONFIG_DIR"/*
    run_cmd find "$NIXOS_CONFIG_DIR" -type d -exec chmod 755 {} \;
    run_cmd find "$NIXOS_CONFIG_DIR" -name "*.sh" -exec chmod +x {} \;
fi

# Move/merge the hardware configuration from nixos-install
echo "‚öôÔ∏è  Integrating hardware configuration..."
HARDWARE_CONFIG_SRC="$NIXOS_CONFIG_DIR/hardware-configuration.nix.backup"
HARDWARE_CONFIG_DEST="$NIXOS_CONFIG_DIR/hosts/$HOSTNAME/hardware-configuration.nix"

if [[ -f "$HARDWARE_CONFIG_SRC" ]]; then
    if [[ "$IN_CHROOT" == "true" ]]; then
        mv "$HARDWARE_CONFIG_SRC" "$HARDWARE_CONFIG_DEST"
    else
        run_cmd mv "$HARDWARE_CONFIG_SRC" "$HARDWARE_CONFIG_DEST" 
    fi
    echo "‚úÖ Hardware configuration moved to hosts/$HOSTNAME/"
else
    echo "‚ö†Ô∏è  No hardware configuration backup found - using flake defaults"
fi

# Create system-wide flake symlink for easy access
echo "üîó Setting up system configuration symlinks..."
if [[ "$IN_CHROOT" == "true" ]]; then
    # Remove any existing config symlink/file
    rm -f "$NIXOS_CONFIG_DIR/configuration.nix"
    rm -f "$NIXOS_CONFIG_DIR/flake.nix" 2>/dev/null || true
    
    # Create primary symlinks
    ln -sf "$NIXOS_CONFIG_DIR/hosts/$HOSTNAME/configuration.nix" "$NIXOS_CONFIG_DIR/configuration.nix"
    ln -sf "$NIXOS_CONFIG_DIR/flake.nix" "$NIXOS_CONFIG_DIR/flake.nix" 2>/dev/null || true
else
    run_cmd rm -f "$NIXOS_CONFIG_DIR/configuration.nix"  
    run_cmd ln -sf "$NIXOS_CONFIG_DIR/hosts/$HOSTNAME/configuration.nix" "$NIXOS_CONFIG_DIR/configuration.nix"
fi

# Test the flake before building
echo "üß™ Testing flake configuration..."
cd "$NIXOS_CONFIG_DIR"

# Verify flake is valid
if [[ "$IN_CHROOT" == "true" ]]; then
    if ! nix flake check ".#nixosConfigurations.$HOSTNAME" 2>/dev/null; then
        echo "‚ö†Ô∏è  Flake check failed - but continuing with build attempt"
    fi
else
    if ! run_cmd nix flake check ".#nixosConfigurations.$HOSTNAME" 2>/dev/null; then
        echo "‚ö†Ô∏è  Flake check failed - but continuing with build attempt"  
    fi
fi

# Perform build and switch
echo "üèóÔ∏è  Building and switching to new configuration..."
if [[ "$IN_CHROOT" == "true" ]]; then
    # In chroot (after nixos-install), use nixos-rebuild
    nixos-rebuild switch --flake ".#$HOSTNAME" --show-trace \
        || { echo "‚ùå Build failed! Check the configuration."; exit 1; }
else
    # On live system, prefer nh if available
    if command -v nh >/dev/null 2>&1; then
        run_cmd nh os switch . --hostname "$HOSTNAME" -- --show-trace \
            || { echo "‚ùå Build failed! Check the configuration."; exit 1; }
    else
        run_cmd nixos-rebuild switch --flake ".#$HOSTNAME" --show-trace \
            || { echo "‚ùå Build failed! Check the configuration."; exit 1; }
    fi
fi

echo ""
echo "‚úÖ Post-install flake deployment complete!"
echo ""
echo "üìã Summary:"
echo "   ‚Ä¢ Host: $HOSTNAME"
echo "   ‚Ä¢ Flake configuration deployed from https://github.com/$GITHUB_USER/$FLAKE_REPO"
echo "   ‚Ä¢ Hardware configuration preserved from nixos-install"
echo "   ‚Ä¢ System built and activated with flake configuration"
echo ""
echo "üîÑ Future updates:"
echo "   ‚Ä¢ For flake updates: nh os switch ~/nixconf/."
echo "   ‚Ä¢ Config location: $NIXOS_CONFIG_DIR"
echo ""

if [[ "$IN_CHROOT" == "true" ]]; then
    echo "üö™ You can now exit chroot and reboot into your flaked system:"
    echo "   exit"
    echo "   umount -R /mnt"
    echo "   reboot"
else
    echo "üîÑ Reboot recommended to ensure all services start with the new configuration."
fi